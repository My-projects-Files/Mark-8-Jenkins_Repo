pipeline {
    agent any 
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Git branch to build')
        string(name: 'IMAGE_TAG', defaultValue: '${BUILD_NUMBER}', description: 'Docker image tag')
    }
    environment {
        
        DOCKER_HUB_USER = "kamalsai33"
        GIT_DEST_REPO = "https://github.com/saikamal33/Mark-10-Kubernet_repo.git"
        GIT_REPO_NAME = "Mark-10-Kubernet_repo"
        GIT_USER_EMAIL = "kamaleshsai33@gmail.com"
        GIT_USER_NAME = "saikamal33"
        
    }

    stages {
        stage('checkout'){
            steps{
                git branch: 'main' , url: 'https://github.com/saikamal33/Mark-8-Jenkins_Repo.git'
            }
        }
        stage('install dependencies'){
            steps{
                script{
                    def SERVICE = ['user-service', 'order-service']
                    for (svc in SERVICE){
                        dir("${svc}") { 
                            sh """
                                python3 -m venv venv
                                ./venv/bin/pip install -r requirements.txt
                                ./venv/bin/pip install pytest flake8
                            """
                        }
                    }
                }
            }
        }
        stage('testing'){
            steps{
                script{
                    def SERVICE = ['user-service', 'order-service']
                    for (svc in SERVICE){
                        dir("${svc}"){
                            sh"""
                                # this is for linting the code
                                ./venv/bin/flake8 .

                                #to run automated test suites- we need to have tests present in tests file
                                #./venv/bin/pytest tests

                            """
                        }
                    }
                }
            }
        }
        stage('build and push code') {
            steps{
                script{
                    def SERVICE = ['user-service', 'order-service']
                    for (svc in SERVICE){
                        dir("${svc}") {
                                def dockerimg = docker.build ("${env.DOCKER_HUB_USER}/${svc}:${env.BUILD_NUMBER}")
                                docker.withRegistry('https://index.docker.io/v1/', "docker-crd") {
                                    dockerimg.push()
                                }    
                        }
                    }
                }
            }
        
        }
        stage('updating kube image'){
            steps{
                script{
                    def SERVICE = ['user-service', 'order-service']
                    for (svc in SERVICE){
                        def DOCKER_IMAGE = "${env.DOCKER_HUB_USER}/${svc}:${env.BUILD_NUMBER}"
                        dir("${svc}") {
                                	withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                				sh """
                				    ls -l
                				    git clone ${GIT_DEST_REPO}
                				    cd Mark-10-Kubernet_repo
                		                    git config user.email '${GIT_USER_EMAIL}'
                		                    git config user.name '${GIT_USER_NAME}'
                		                    sed -i "s|image: .*$|image: '${DOCKER_IMAGE}' |" kube-Mark-10.6/${svc}/deployment.yml
                		                    git add kube-Mark-10.6/${svc}/deployment.yml
                		                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                		                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                		            """
                                        }
                                }
                        }
                    }

                }
            }
        }
        post {
         failure {
                echo "Build or test failed"
        }
        success {
            echo "microservice build, test, and deploy completed"
        }
        always {
            cleanWs()
        }
     }
}

